{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [],
  "mappings": "AAAA,EAAE,CAAC,KAAK,CAAC;AACL,eAAS,EAAE,CAAC,SAAS;;AAErB,cAAU,EAAE;;AAER,kBAAU,EAAE,CAAC;;AAEb,YAAI,EAAE;AACF,uBAAS,IAAI;AACb,wBAAY,EAAE,KAAK;SACtB;KACJ;;AAED,UAAM,EAAE,kBAAY;AAChB,YAAI,CAAC,OAAO,GAAG,KAAK,CAAC;KACxB;;;AAGD,QAAI,EAAE,cAAU,IAAI,EAAE;AAClB,YAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACjB,YAAI,CAAC,OAAO,GAAG,IAAI,CAAC;AACpB,YAAI,CAAC,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC;KAC3B;;AAED,SAAK,EAAC,eAAC,IAAI,EAAE;AACT,YAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACnB;;AAED,qBAAiB,EAAE,6BAAY;;AAE3B,YAAI,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC;;AAEhD,YAAI,IAAI,GAAG,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;AACvD,eAAO,IAAI,CAAC;KACf;;AAED,YAAQ,EAAE,oBAAW;AACjB,YAAI,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;;AAElC,YAAI,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;;AAEzB,YAAI,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACpC;;;AAGD,UAAM,EAAE,gBAAU,EAAE,EAAE;;AAElB,YAAI,IAAI,CAAC,iBAAiB,EAAE,GAAG,IAAI,CAAC,UAAU,EAAE;;AAE5C,gBAAI,CAAC,QAAQ,EAAE,CAAC;AAChB,mBAAO;SACV;;AAED,YAAI,YAAY,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,GAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC;AAC9D,YAAI,UAAU,GAAG,EAAE,CAAC;AACpB,YAAI,CAAC,IAAI,CAAC,OAAO,GAAG,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,IAAI,GAAG,GAAG,UAAU,CAAA,AAAC,CAAC,CAAC;KAClF;CACJ,CAAC,CAAC",
  "file": "unknown",
  "sourcesContent": [
    "cc.Class({\n    extends: cc.Component,\n\n    properties: {\n  \n        pickRadius: 0,\n      \n        game: {\n            default: null,\n            serializable: false\n        }\n    },\n\n    onLoad: function () {\n        this.enabled = false;\n    },\n\n    // use this for initialization\n    init: function (game) {\n        this.game = game;\n        this.enabled = true;\n        this.node.opacity = 255;\n    },\n\n    reuse (game) {\n        this.init(game);\n    },\n\n    getPlayerDistance: function () {\n    \n        var playerPos = this.game.player.getCenterPos();\n       \n        var dist = cc.pDistance(this.node.position, playerPos);\n        return dist;\n    },\n\n    onPicked: function() {\n        var pos = this.node.getPosition();\n      \n        this.game.gainScore(pos);\n       \n        this.game.despawnStar(this.node);\n    },\n\n    // called every frame\n    update: function (dt) {\n        \n        if (this.getPlayerDistance() < this.pickRadius) {\n            \n            this.onPicked();\n            return;\n        }\n       \n        var opacityRatio = 1 - this.game.timer/this.game.starDuration;\n        var minOpacity = 50;\n        this.node.opacity = minOpacity + Math.floor(opacityRatio * (255 - minOpacity));\n    },\n});"
  ]
}